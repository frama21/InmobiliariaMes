import static org.junit.Assert.*;
import logica.Asesor;
import logica.Cliente;
import logica.Controlador;
import logica.NaveIndustrial;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import persistencia.ConnectionManager;
import excepciones.DAOExcepcion;
import excepciones.LogicaExcepcion;


/**
 * @author Fran Martí
 * 
 * Campo de número de puertas
 */

public class CrearNaveIndustrialTest_Bug564 {
	
    String numPuertas;
    Controlador controlador;
    Cliente cli;
    Asesor ase;
    NaveIndustrial nv;
    
    
    @Before
    public void inicializar() {
    	
    	numPuertas = "ff";
    	    	
    	controlador = Controlador.dameControlador();
    	
    	cli = new Cliente("125", "Juan","ape");
    	ase = new Asesor("12356", "Asesor 12");
    	nv = new NaveIndustrial("111","calle","localidad", "1/01/2013", "200", "venta", numPuertas, "20", ase, cli);
				
    }

	@Test
	public void testCrearNaveIndustrial() {
		
		try{
			//Es necesario insertar el cliente y el asesor en la BBDD para poder crear la NV
		    controlador.crearAsesor(ase);
			controlador.crearCliente(cli);
			controlador.crearNaveIndustrial(nv);
			
	    	fail("El método debería de haber fallado");
    	}
    	catch(LogicaExcepcion e){
    		assertTrue(true);
    	}
		/*
		try{
			numPu = Integer.parseInt(nave.getNum_puertas());
			assertTrue("El número no es positivo", numPu>=0);
		}
		catch(NumberFormatException e){
			fail("Debes de introducir un valor numérico");
		}*/
	}
	
	@After
    public void after(){
    	try{
    		ConnectionManager connManager = new ConnectionManager("practicaFinal");
            connManager.connect();
            
            connManager.updateDB("delete from NAVEINDUSTRIAL where num_puertas='" + nv.getNumPuertas() + "'");
            connManager.updateDB("delete from INMUEBLE where COD_ID='" + nv.getCodId() + "'");
            connManager.updateDB("delete from ASESOR where CODIGO_EMPLEADO='" + ase.getCodigoEmp()+ "'");
            connManager.updateDB("delete from CLIENTE where NIF_CLIENTE='" + cli.getNif() + "'");
            
            connManager.close();
    	}
    	catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    	
    	catch(DAOExcepcion ex){
    		ex.printStackTrace();    		
    	}
    }

}
